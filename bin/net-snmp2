#! /usr/bin/env ruby

require 'logger'
require 'optparse'
require 'pry'

$: << "#{File.dirname(__FILE__)}/../lib"
require 'net-snmp2'

usage = '
Usage: net-snmp2 -v [VERSION] -c [COMMUNITY] [HOST[:PORT]]
'.sub("\n", "")

options = {
  :version => '2c',
  :community => 'public',
  :peername => 'localhost',
  :port => '161'
}

OptionParser.new do |opt|
  opt.on("-v VERSION") do |version|
    case version
    when /^1$/
      options[:version] = '1'
    when /^2c?$/i
      options[:version] = '2c'
    when /^3$/
      options[:version] = '3'
    else
      puts "Invalid version: #{version}"
      puts
      puts usage
    end
  end

  opt.on("-c COMMUNITY") do |community|
    options[:community] = community
  end

end.parse!

if ARGV.length > 0
  peername = ARGV[0]
  m = peername.match /^([^:]*)(:([0-9]*))?$/
  options[:peername] = m[1]
  options[:port] = m[3] unless m[3].nil? || m[3].empty?
end

Net::SNMP::Debug.logger = Logger.new(STDOUT)
Net::SNMP::Debug.logger.level = Logger::INFO
ARGV.clear

session = Net::SNMP::Session.open(options)

class ManagerRepl
  attr_accessor :session, :pdu
  alias response pdu

  def initialize(session)
    @session = session
  end

  def get(oids, options = {})
    oids = Array(oids)
    @pdu = session.get(oids)
    @pdu.print
    @pdu.error? ? :error : :success
  end

  def set(varbinds, options = {})
    @pdu = session.set(varbinds)
    @pdu.print
    @pdu.error? ? :error : :success
  end
end

Net::SNMP.init
pry_context = ManagerRepl.new(session)
Pry.config.prompt_name = "net-snmp2"
pry_context.pry
